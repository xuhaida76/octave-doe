## Copyright (C) 2012 - Michael Baudin
## Copyright (C) 2012 - Maria Christopoulou
## Copyright (C) 2009 - Yann Collette
##
## This file must be used under the terms of the CeCILL.
## This source file is licensed as described in the file COPYING, which
## you should have received as part of this distribution.  The terms
## are also available at
## http:##www.cecill.info/licences/Licence_CeCILL_V2-en.txt

function DSS = sortdesign(D)
    ## Sort the experiments of a design of experiments
    ##
    ## Calling Sequence
    ##    D = scidoe_sortdesign(D)
    ##
    ## Parameters
    ##    D : a m-by-nbvar matrix of doubles, the design of experiments.
    ##
    ## Description
    ## Sorts the rows of a DOE, so that we gather the 
    ## rows which are common, ignoring the signs 
    ## of the entries.
    ##
    ## In a DOE which has {0,-1,+1} entries, this gathers 
    ## the blocks which have +-1 entries. 
    ## This makes the factorial blocks of the design more obvious. 
    ##
    ## Examples
    ## ## A DOE with no obvious structure.
    ## E = [
    ## -1 1 0
    ## -1 -1 0
    ## 0 0 0
    ## 1 -1 0
    ## 0 -1 1
    ## -1 0 -1
    ## 0 1 1
    ## -1 0 1
    ## 1 0 1
    ## 0 -1 -1
    ## 1 0 -1
    ## 0 1 -1
    ## 1 1 0
    ## ]
    ## D = scidoe_sortdesign(E)
    ##
    ## Authors
    ## Copyright (C) 2012 - Michael Baudin

    ## Check number of input and output arguments:
    ## [lhs, rhs] = argn()
    ## apifun_checkrhs("scidoe_sortdesign",rhs,1)
    ## apifun_checklhs("scidoe_sortdesign",lhs,1)
    ##
    ## Check type, size, content of nbvar
    ## apifun_checktype("scidoe_sortdesign",D,"D",1,"constant")

    ## function order=myLexOrder(x, y)
        ## Lexicographic order
		## TODO : vectorize this!
    ##    order = 0
    ##    for i = 1:size(x,"*")
    ##        if (x(i)<y(i)) then
    ##            order = -1
    ##            break
    ##        elseif (x(i)>y(i)) then
    ##            order = 1
    ##            break
    ##        end
    ##    end
    ## endfunction
    ## function order=myorder(x, y)
        ## Good order for designs
    ##    order=myLexOrder(abs(x), abs(y))
    ##    if (order<>0) then
    ##        return
    ##    end
    ##    order=myLexOrder(x, y)
    ## endfunction

    ##
    ## Move matrix into a list
    ##Dlist = list();
    ##for i = 1:size(D,"r")
    ##    Dlist(i)=D(i,:);
    ##end
    ##
    ## Sort
  [DS,SI] = sortrows(D);
    ##
    ## Move list into a matrix
  [DS2,SII] = sortrows(abs(DS));
  DSS=D(SI(SII),:);
    
endfunction


%!test

%! D = [
%!    -1 -1 0.
1 -1 0;
-1 1 0;
1 1 0.
-1 0 -1;
1 0 -1;
-1 0 1;
1 0 1;
0 -1 -1;
0 1 -1;
0 -1 1;
0 1 1;
0 0 0
];
C = sortdesign(D);
E = [
   0.   0.   0.  
   0.  -1.  -1.  
   0.  -1.   1.  
   0.   1.  -1.  
   0.   1.   1.  
  -1.   0.  -1.  
  -1.   0.   1.  
   1.   0.  -1.  
   1.   0.   1.  
  -1.  -1.   0.  
  -1.   1.   0.  
   1.  -1.   0.  
   1.   1.   0.  
];
assert_checkequal(C,E);
//
// A DOE with no obvious structure.
D = [
-1 1 0
-1 -1 0
0 0 0
1 -1 0
0 -1 1
-1 0 -1
0 1 1
-1 0 1
1 0 1
0 -1 -1
1 0 -1
0 1 -1
1 1 0
]
 D  =
 
  - 1.    1.    0.  
  - 1.  - 1.    0.  
    0.    0.    0.  
    1.  - 1.    0.  
    0.  - 1.    1.  
  - 1.    0.  - 1.  
    0.    1.    1.  
  - 1.    0.    1.  
    1.    0.    1.  
    0.  - 1.  - 1.  
    1.    0.  - 1.  
    0.    1.  - 1.  
    1.    1.    0.  
C = scidoe_sortdesign(D);
assert_checkequal(C,E);