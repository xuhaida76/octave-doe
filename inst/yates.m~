# Copyright (C) 2012 - Maria Christopoulou
# Copyright (C) 2001 - Per A. Brodtkorb
#
# This file is released under the terms of the CeCILL_V2 license : http:#www.cecill.info/licences/Licence_CeCILL_V2-en.txt

function [ef, id] = yates(y,varargin)
    # Calculates main and interaction effects using Yate's algorithm.
	#
    # Calling Sequence
    #    ef = scidoe_yates(y)
    #    ef = scidoe_yates(y,sort_eff)
    #    [ef,id] = scidoe_yates(...)
    # 
    #  Parameters
    #    y : a n-by-1 vector of doubles, containing the calculated response from a two-level complete factorial design in standard order
    #    sort_eff : a 1-by-1 matrix of booleans, set to true to sort the effects (default sort_eff=%f). If sort_eff is true, sorts the id matrix and the corresponding ef vector, so that main effects are first, followed by two-factor and three-factor interactions. 
    #    ef : a n-by-1 vector of doubles, containing average response, main effects and interaction effects. ef(1) is the average response and ef(2:$) contain the main effects and interaction effects corresponding to the vector id.
    #    id : a (n-1)-by-k matrix of doubles, the identification matrix of main and interaction effects.
    #
    # Description
    #    Calculates main and interaction effects using Yates algorithm.
	#    
    #    Let us analyse the output of the first example below:
    #   
    #    ef = [
	#  64.25  
	#  23. 
	# -5.  
	#  1.5 
	#  1.5 
	#  10. 
	#  0.  
	#  0.5 
	# ]
    #    id  = [
	#          1.    0.    0.              
    #          2.    0.    0.              
    #          1.    2.    0.              
    #          3.    0.    0.              
    #          1.    3.    0.              
    #          2.    3.    0.              
    #          1.    2.    3.              
	#    ]
	#    
    #                                       
    #    For i=1,2,...,n-1, the entry ef(i+1) is 
    #    the effect of the parameters in id(i,:).
    #     
    #    ef(1) is the average response of the experiment.
    #        
    #    The effect ef(2) = 23 is associated with id(1,:) = [1 0 0],
	#    which shows what is the effect of the parameter X1 (while X2 and X3 remain fixed).
    #         
    #    The effect ef(6) = 10 is associated with id(5,:) = [1 3 0], 
    #    which shows the effect when X1 and X3 interact (while X2 remains fixed).
    #    
    #    The effect ef(8) = 0.5 is associated with id(7,:) = [1 2 3], 
    #    which shows the effect when X1, x2 and X3 interact.
    #         
    #    
    #    This function is adapted from the WAFO toolbox :
    #    http:#www.maths.lth.se/matstat/wafo/documentation/wafodoc/wafo/wstats/yates.html
    #
    # Examples
    # # Calculate main and interaction effects
    # D = scidoe_ff2n(3); # complete 2^3 design in standard order.
    # y = [60 72 54 68 52 83 45 80]'; # Responses to design D.
    # [ef,id] = scidoe_yates(y)
    # # Another example
    # D = scidoe_ff2n(3)
    # y = [28 36 22 31 25 33 19 26]'
    # [ef,id] = scidoe_yates(y)
    #
    # # See the sort_eff option in action
    # [ef,id] = scidoe_yates(y,%t)
    #
    # Bibliography
    # "Statistics for experimenters Design,Innovation and Discovery", Second Edition, George E.P Box, J. Stuart Hunter, William Hunter, Wiley Series, 2005. 177-183, 191.
	# http:#www.itl.nist.gov/div898/handbook/eda/section3/eda35i.htm
    # 
    # Authors
    #    Copyright (C) 2012 - Maria Christopoulou
    #    Copyright (C) 2001 - Per A. Brodtkorb


    # Check number of input and output arguments:
    # [lhs, rhs] = argn()
    #apifun_checkrhs("scidoe_yates",rhs,1:2)
    #apifun_checklhs("scidoe_yates",lhs,1:2)
    #
    # 
    #y = varargin(1)
    #sort_eff = apifun_argindefault(varargin,2,%F)
    #
    # Check type
    # apifun_checktype("scidoe_yates",y,"y",1,"constant")
    #apifun_checktype("scidoe_yates",sort_eff,"sort_eff",2,"boolean")
    #
    # Check if y is column vector
    #apifun_checkveccol("scidoe_yates",y,"y",1)

    p=inputParser();
				   
				   p.addRequired("y",@isvector);
				   p.addOptional("sort_eff",true,@islogical);
				   
				   
				   
				   
				   
    
    #
    # Check whether length of y is power of two
    n = size(y,1);    # Number of runs
    k = log2(n);    # Number of variables
    #
    if (k~=round(k)) 
        error("Length of vector y must be power of two");
    end
    #
    # Yates algorithm
    ef   = y;
    ind2 = 2:2:n;
    ind1 = 1:2:n-1;
    for ix=1:k
        ef = [ef(ind2,:)+ef(ind1,:); ef(ind2,:)-ef(ind1,:)];
    end
    ef = ef*(2/n);
    ef(1,:) = ef(1,:)/2;
    #
    # Identification vector
    if (nargin>1) 
        id = zeros(n-1,k);
        iz = 0;
        for ix = 1:k
            iz = iz+1;
            id(iz,1) = ix;
            iz0      = iz;
            for iy = 1:iz0-1,
                iz = iz+1;
                id(iz,:) = id(iy,:);
                ind = min(find(id(iy,:)==0));
                id(iz,ind) = ix;
            end
        end

        if (sort_eff) 
            id = id(:,$:-1:1);
            [id, ind] = sortrows(id,i);
            id = id(:,$:-1:1);
            ef(2:$,:) = ef(ind+1,:);
        end

    end

endfunction

# "Statistics for experimenters Design,Innovation and Discovery",
# Second Edition, George E.P Box, J. Stuart Hunter, William Hunter, Wiley Series, 2005
# Table 5.2 - Pilot Plant Investigation, page 177

%!test
%! y = [60 72 54 68 52 83 45 80]';
%! ef_expected = [64.25
                23
                -5
                1.5
                1.5
                10
                0
                0.5
	       ];

 id_expected = [1.    0.    0.  
              2.    0.    0.  
              1.    2.    0.  
              3.    0.    0.  
              1.    3.    0.  
              2.    3.    0.  
              1.    2.    3.  ];
              
 [ef_computed, id_computed] = yates(y);
 assert(ef_expected, ef_computed);
 assert(id_expected, id_computed);
#
# Check sort_eff = %T option
# In this particular example, ef_expected is the same for both calls.

%!test
 id_expected2 = [1.    0.    0.  
                2.    0.    0.  
                3.    0.    0.  
                1.    2.    0.  
                1.    3.    0.  
                2.    3.    0.  
                1.    2.    3.];
 [ef_computed, id_computed2] = yates(y,true);
 assert(ef_expected, ef_computed);
 assert(id_expected2, id_computed2);

# "Statistics for experimenters Design,Innovation and Discovery",
# Second Edition, George E.P Box, J. Stuart Hunter, William Hunter, Wiley Series, 2005
# Table 5.2 - Yarn Experiment
test
 y = [28 36 22 31 25 33 19 26]';
 [ef_computed,id_computed] = scidoe_yates(y);

 ef_expected = [27.5 8. -6. 0. -3.5 -0.5 -0.5 -0.5]';
                 
 id_expected = [1.    0.    0.  
                   2.    0.    0.  
                   1.    2.    0.  
                   3.    0.    0.  
                   1.    3.    0.  
                   2.    3.    0.  
                   1.    2.    3.  ];
                   
 assert(ef_expected, ef_computed);
 assert(id_expected, id_computed);

# Check sort_eff = true option
test
 id_expected=[1.    0.    0.  
    2.    0.    0.  
    3.    0.    0.  
    1.    2.    0.  
    1.    3.    0.  
    2.    3.    0.  
    1.    2.    3.  ];
    
 ef_expected=[27.5 8. -6. -3.5 0. -0.5 -0.5 -0.5]';
  
 [ef_computed,id_computed] = yates(y,true);
 assert(ef_expected, ef_computed);
 assert(id_expected, id_computed);


