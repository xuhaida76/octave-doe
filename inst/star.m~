# Copyright (C) 2012-2013 - Michael Baudin
# Copyright (C) 2012 - Maria Christopoulou
# Copyright (C) 2009 - Yann Collette
#
# This file must be used under the terms of the CeCILL.
# This source file is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at
# http:#www.cecill.info/licences/Licence_CeCILL_V2-en.txt

function [H, a] = star(nbvar,varargin)
    # Produces a star point design of experiments
    #
    # Calling Sequence
    #    H = scidoe_star(nbvar)
    #    [H, a] = scidoe_star(nbvar)
    #    H = scidoe_star(nbvar,"Name",value)
    #    [H, a] = scidoe_star(nbvar,"Name",value)
    #
    # Parameters
    #    nbvar : a 1-by-1 matrix of doubles, positive integer, the number of variables of the experiments
    #    Name : a 1-by-1 matrix of strings. The options are "alpha" and "center". 
    #    value : the value
    #    H : a 2*nbvar-by-nbvar matrix of doubles, the design of experiments
    #    a : a 1-by-1 matrix of doubles, a positive integer, the value of alpha
    #
    # Description
    # This function computes a star points design of experiments, used as 
    # an additional block of runs in Response Surface Designs (RSM).
    # Each factor is sequentially placed at +/-alpha, while all other factors 
    # are at zero. The value of alpha is determined by the user to give the 
    # design desirable properties.
    #
    # The available options are the following.
    # <itemizedlist>
    #   <listitem>
    #     <para>
    #       "alpha" : "orthogonal", "rotatable" or "faced" (default). 
    #     </para>
    #   </listitem>
    #   <listitem>
    #     <para>
    #       "center" : a 1-by-2 row vector of doubles, positive integers, 
    #       indicating the number of center points assigned in each block 
    #       of the response surface design. Default is [1 1]. 
    #     </para>
    #   </listitem>
    # </itemizedlist>
    #
    # A RSM design includes a factorial block of exeprimental runs 
    # and a block of center points.
    # These points are used to calculate alpha, as follows0
    #
    # If the design is "orthogonal", 
    # <screen>
    # alpha = sqrt(nbvar*(1+(nao/na))/(1+(nco/nc))),
    # </screen>
    # where 
    # <itemizedlist>
    #   <listitem>
    #     <para>
    #       nc : the number of factorial points, 
    #     </para>
    #   </listitem>
    #   <listitem>
    #     <para>
    #       nco : the number of center points added to the factorial design, 
    #     </para>
    #   </listitem>
    #   <listitem>
    #     <para>
    #       na : the number of axial points, 
    #     </para>
    #   </listitem>
    #   <listitem>
    #     <para>
    #       nao : the number of center points added to the axial points.
    #     </para>
    #   </listitem>
    # </itemizedlist>
    #
    # If the design is rotatable, 
    # <screen>
    # alpha = nc^1/4, 
    # </screen>
    # where nc=2^nbvar are the factorial points.
    #
    # If the design is "faced", then alpha=1.
    #
    # The center points is a 1-by-2 row vector of doubles, positive integers, 
    # indicating the number of center points assigned in each block of the 
    # response surface design.
    # The default number of center points is [1,1], meaning 1 center point 
    # in the factorial block of the doe and 1 center point in the star 
    # points block.
    # Setting the number of center points is meaningful only for the 
    # "orthogonal" design.
    #
    # Examples
    # # Star points placed on the face of a factorial design
    # H = scidoe_star(3)
    # H = scidoe_star(3,"alpha","faced")
    # # Star points block for orthogonal design with 3 factors
    # H = scidoe_star(3,"alpha","orthogonal")
    # # Star points block for rotatable design with 3 factors
    # H = scidoe_star(3,"alpha","rotatable")
    # # Star doe with 2 center points in the factorial block 
    # # and 3 center points in the star points block
    # H = scidoe_star(3,"alpha","orthogonal","center",[2 3])
    #
    #
    # Bibliography
    # http:#en.wikipedia.org/wiki/Central_composite_design
    # http:#www.itl.nist.gov/div898/handbook/pri/section3/pri3361.htm
    #
    # Authors
    # Copyright (C) 2012-2013 - Michael Baudin
    # Copyright (C) 2012 - Maria Christopoulou
    # Copyright (C) 2009 - Yann Collette

  
#    [lhs,rhs] = argn()
#    apifun_checkrhs("scidoe_star",rhs,1:5)
#    apifun_checklhs("scidoe_star",lhs,1:2)
    #
    # Check type, size, content of nbvar
    
    #
    # Choose alpha to produce a design with desirable properties
    # Set default value

    p=inputParser();
    p.addRequired("nbvar",@isinteger);
    p.addParameter("alpha","faced",@(x) any (validatestring(x,{"orthogonal","rotatable","faced"})));
    
    p.addParameter("center",[1,1]);
    
    p.parse(nbvar,varargin{:})

    alphavalue=p.Results.alpha;
    centervalue=p.Results.center;

    #
    # Orthogonal Design
    if (strcmp(alphavalue,"orthogonal"))
        nc = 2^nbvar; # Factorial points
        nco = centervalue(1); # Center points to factorial
        na=2*nbvar; # Axial points
        nao= centervalue(2); # Center points to axial design
        # Value of alpha in orthogonal design
        a = sqrt((nbvar*(1+(nao/na)))/(1+(nco/nc))); 
    end
    #
    # Rotatable Design
    if (alphavalue == "rotatable") then
        nc = 2^nbvar; # Number of Factorial points
        a = nc^(1/4); # Value of alpha in rotatable design
    end
    #
    # Star points are at the center of each face of the factorial
    if (alphavalue == "faced") then
        a=1;
    end
    #
    #
    H = eye(nbvar, nbvar);
    H = [H -H]';
    H= sortdesign(a*H);
    H= flipdim(H,2);

endfunction

%# Tests are generated with the functions rsmDesign and star of R

%# Generate an orthogonal star point doe with 3 factors, 2 center points in the factorial cube and 3 center points in the star points block
%# design=rsmDesign(k=3,alpha="orthogonal",cc=2,cs=3)
%# star(design)

%!test
%! B =[
%! -1.897367  0.000000  0.000000
%!  1.897367  0.000000  0.000000
%!  0.000000 -1.897367  0.000000
%!  0.000000  1.897367  0.000000
%!  0.000000  0.000000 -1.897367
%!  0.000000  0.000000  1.897367];
%! E = star(3,"alpha","orthogonal","center",[2 3]);
%! assert(B,E,1.0e-4)
%! 
%!test
%!# Rotatable star doe
%!# design=rsmDesign(k=3,alpha="rotatable")
%!# star(design)
%! B = [
%!  -1.681793  0.000000  0.000000
%!   1.681793  0.000000  0.000000
%!   0.000000 -1.681793  0.000000
%!   0.000000  1.681793  0.000000
%!   0.000000  0.000000 -1.681793
%!   0.000000  0.000000  1.681793];
%! E = star(3,"alpha","rotatable");
%! assert(B,E,1.0e-4)
